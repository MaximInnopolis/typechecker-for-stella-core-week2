/* This Bison file was machine-generated by BNFC */
%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <algorithm>
#include "Absyn.H"
typedef struct yy_buffer_state *YY_BUFFER_STATE;
int yyparse(void);
int yylex(void);
YY_BUFFER_STATE Stellayy_scan_string(const char *str);
void Stellayy_delete_buffer(YY_BUFFER_STATE buf);
int Stellayy_mylinenumber;
int Stellainitialize_lexer(FILE * inp);
int Stellayywrap(void)
{
  return 1;
}
void Stellayyerror(const char *str)
{
  extern char *Stellayytext;
  fprintf(stderr,"error: line %d: %s at %s\n",
    Stellayy_mylinenumber, str, Stellayytext);
}


namespace Stella
{
static Program* YY_RESULT_Program_ = 0;
static ListStellaIdent* YY_RESULT_ListStellaIdent_ = 0;
static LanguageDecl* YY_RESULT_LanguageDecl_ = 0;
static Extension* YY_RESULT_Extension_ = 0;
static ListExtensionName* YY_RESULT_ListExtensionName_ = 0;
static ListExtension* YY_RESULT_ListExtension_ = 0;
static Decl* YY_RESULT_Decl_ = 0;
static ListDecl* YY_RESULT_ListDecl_ = 0;
static LocalDecl* YY_RESULT_LocalDecl_ = 0;
static ListLocalDecl* YY_RESULT_ListLocalDecl_ = 0;
static Annotation* YY_RESULT_Annotation_ = 0;
static ListAnnotation* YY_RESULT_ListAnnotation_ = 0;
static ParamDecl* YY_RESULT_ParamDecl_ = 0;
static ListParamDecl* YY_RESULT_ListParamDecl_ = 0;
static ReturnType* YY_RESULT_ReturnType_ = 0;
static ThrowType* YY_RESULT_ThrowType_ = 0;
static Type* YY_RESULT_Type_ = 0;
static ListType* YY_RESULT_ListType_ = 0;
static MatchCase* YY_RESULT_MatchCase_ = 0;
static ListMatchCase* YY_RESULT_ListMatchCase_ = 0;
static OptionalTyping* YY_RESULT_OptionalTyping_ = 0;
static PatternData* YY_RESULT_PatternData_ = 0;
static ExprData* YY_RESULT_ExprData_ = 0;
static Pattern* YY_RESULT_Pattern_ = 0;
static ListPattern* YY_RESULT_ListPattern_ = 0;
static LabelledPattern* YY_RESULT_LabelledPattern_ = 0;
static ListLabelledPattern* YY_RESULT_ListLabelledPattern_ = 0;
static Binding* YY_RESULT_Binding_ = 0;
static ListBinding* YY_RESULT_ListBinding_ = 0;
static Expr* YY_RESULT_Expr_ = 0;
static ListExpr* YY_RESULT_ListExpr_ = 0;
static PatternBinding* YY_RESULT_PatternBinding_ = 0;
static ListPatternBinding* YY_RESULT_ListPatternBinding_ = 0;
static VariantFieldType* YY_RESULT_VariantFieldType_ = 0;
static ListVariantFieldType* YY_RESULT_ListVariantFieldType_ = 0;
static RecordFieldType* YY_RESULT_RecordFieldType_ = 0;
static ListRecordFieldType* YY_RESULT_ListRecordFieldType_ = 0;
static Typing* YY_RESULT_Typing_ = 0;

Program* pProgram(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Program_;
  }
}
Program* pProgram(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Program_;
  }
}

ListStellaIdent* pListStellaIdent(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStellaIdent_;
  }
}
ListStellaIdent* pListStellaIdent(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStellaIdent_;
  }
}

LanguageDecl* pLanguageDecl(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_LanguageDecl_;
  }
}
LanguageDecl* pLanguageDecl(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_LanguageDecl_;
  }
}

Extension* pExtension(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Extension_;
  }
}
Extension* pExtension(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Extension_;
  }
}

ListExtensionName* pListExtensionName(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExtensionName_;
  }
}
ListExtensionName* pListExtensionName(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExtensionName_;
  }
}

ListExtension* pListExtension(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExtension_;
  }
}
ListExtension* pListExtension(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExtension_;
  }
}

Decl* pDecl(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Decl_;
  }
}
Decl* pDecl(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Decl_;
  }
}

ListDecl* pListDecl(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListDecl_;
  }
}
ListDecl* pListDecl(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListDecl_;
  }
}

LocalDecl* pLocalDecl(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_LocalDecl_;
  }
}
LocalDecl* pLocalDecl(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_LocalDecl_;
  }
}

ListLocalDecl* pListLocalDecl(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListLocalDecl_;
  }
}
ListLocalDecl* pListLocalDecl(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListLocalDecl_;
  }
}

Annotation* pAnnotation(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Annotation_;
  }
}
Annotation* pAnnotation(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Annotation_;
  }
}

ListAnnotation* pListAnnotation(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListAnnotation_;
  }
}
ListAnnotation* pListAnnotation(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListAnnotation_;
  }
}

ParamDecl* pParamDecl(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ParamDecl_;
  }
}
ParamDecl* pParamDecl(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ParamDecl_;
  }
}

ListParamDecl* pListParamDecl(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListParamDecl_;
  }
}
ListParamDecl* pListParamDecl(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListParamDecl_;
  }
}

ReturnType* pReturnType(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ReturnType_;
  }
}
ReturnType* pReturnType(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ReturnType_;
  }
}

ThrowType* pThrowType(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ThrowType_;
  }
}
ThrowType* pThrowType(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ThrowType_;
  }
}

Type* pType9(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_;
  }
}
Type* pType9(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_;
  }
}

ListType* pListType9(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListType_;
  }
}
ListType* pListType9(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListType_;
  }
}

MatchCase* pMatchCase(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_MatchCase_;
  }
}
MatchCase* pMatchCase(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_MatchCase_;
  }
}

ListMatchCase* pListMatchCase(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListMatchCase_;
  }
}
ListMatchCase* pListMatchCase(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListMatchCase_;
  }
}

OptionalTyping* pOptionalTyping(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_OptionalTyping_;
  }
}
OptionalTyping* pOptionalTyping(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_OptionalTyping_;
  }
}

PatternData* pPatternData(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PatternData_;
  }
}
PatternData* pPatternData(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PatternData_;
  }
}

ExprData* pExprData(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ExprData_;
  }
}
ExprData* pExprData(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ExprData_;
  }
}

Pattern* pPattern(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Pattern_;
  }
}
Pattern* pPattern(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Pattern_;
  }
}

ListPattern* pListPattern(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListPattern_;
  }
}
ListPattern* pListPattern(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListPattern_;
  }
}

LabelledPattern* pLabelledPattern(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_LabelledPattern_;
  }
}
LabelledPattern* pLabelledPattern(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_LabelledPattern_;
  }
}

ListLabelledPattern* pListLabelledPattern(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListLabelledPattern_;
  }
}
ListLabelledPattern* pListLabelledPattern(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListLabelledPattern_;
  }
}

Binding* pBinding(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Binding_;
  }
}
Binding* pBinding(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Binding_;
  }
}

ListBinding* pListBinding(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListBinding_;
  }
}
ListBinding* pListBinding(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListBinding_;
  }
}

Expr* pExpr(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expr_;
  }
}
Expr* pExpr(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expr_;
  }
}

ListExpr* pListExpr(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExpr_;
  }
}
ListExpr* pListExpr(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExpr_;
  }
}

Expr* pExpr1(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expr_;
  }
}
Expr* pExpr1(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expr_;
  }
}

PatternBinding* pPatternBinding(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PatternBinding_;
  }
}
PatternBinding* pPatternBinding(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PatternBinding_;
  }
}

ListPatternBinding* pListPatternBinding(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListPatternBinding_;
  }
}
ListPatternBinding* pListPatternBinding(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListPatternBinding_;
  }
}

Expr* pExpr2(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expr_;
  }
}
Expr* pExpr2(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expr_;
  }
}

ListExpr* pListExpr2(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExpr_;
  }
}
ListExpr* pListExpr2(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExpr_;
  }
}

Expr* pExpr3(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expr_;
  }
}
Expr* pExpr3(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expr_;
  }
}

Expr* pExpr4(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expr_;
  }
}
Expr* pExpr4(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expr_;
  }
}

Expr* pExpr6(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expr_;
  }
}
Expr* pExpr6(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expr_;
  }
}

Expr* pExpr7(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expr_;
  }
}
Expr* pExpr7(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expr_;
  }
}

Type* pType(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_;
  }
}
Type* pType(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_;
  }
}

Type* pType1(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_;
  }
}
Type* pType1(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_;
  }
}

Type* pType2(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_;
  }
}
Type* pType2(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_;
  }
}

Type* pType3(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_;
  }
}
Type* pType3(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_;
  }
}

ListType* pListType(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListType_;
  }
}
ListType* pListType(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListType_;
  }
}

Expr* pExpr5(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expr_;
  }
}
Expr* pExpr5(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expr_;
  }
}

VariantFieldType* pVariantFieldType(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_VariantFieldType_;
  }
}
VariantFieldType* pVariantFieldType(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_VariantFieldType_;
  }
}

ListVariantFieldType* pListVariantFieldType(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListVariantFieldType_;
  }
}
ListVariantFieldType* pListVariantFieldType(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListVariantFieldType_;
  }
}

RecordFieldType* pRecordFieldType(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_RecordFieldType_;
  }
}
RecordFieldType* pRecordFieldType(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_RecordFieldType_;
  }
}

ListRecordFieldType* pListRecordFieldType(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListRecordFieldType_;
  }
}
ListRecordFieldType* pListRecordFieldType(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListRecordFieldType_;
  }
}

Typing* pTyping(FILE *inp)
{
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Typing_;
  }
}
Typing* pTyping(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  Stellayy_mylinenumber = 1;
  Stellainitialize_lexer(0);
  buf = Stellayy_scan_string(str);
  result = yyparse();
  Stellayy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Typing_;
  }
}


}
%}

%union
{
  int int_;
  char char_;
  double double_;
  char* string_;
  Stella::Program* program_;
  Stella::ListStellaIdent* liststellaident_;
  Stella::LanguageDecl* languagedecl_;
  Stella::Extension* extension_;
  Stella::ListExtensionName* listextensionname_;
  Stella::ListExtension* listextension_;
  Stella::Decl* decl_;
  Stella::ListDecl* listdecl_;
  Stella::LocalDecl* localdecl_;
  Stella::ListLocalDecl* listlocaldecl_;
  Stella::Annotation* annotation_;
  Stella::ListAnnotation* listannotation_;
  Stella::ParamDecl* paramdecl_;
  Stella::ListParamDecl* listparamdecl_;
  Stella::ReturnType* returntype_;
  Stella::ThrowType* throwtype_;
  Stella::Type* type_;
  Stella::ListType* listtype_;
  Stella::MatchCase* matchcase_;
  Stella::ListMatchCase* listmatchcase_;
  Stella::OptionalTyping* optionaltyping_;
  Stella::PatternData* patterndata_;
  Stella::ExprData* exprdata_;
  Stella::Pattern* pattern_;
  Stella::ListPattern* listpattern_;
  Stella::LabelledPattern* labelledpattern_;
  Stella::ListLabelledPattern* listlabelledpattern_;
  Stella::Binding* binding_;
  Stella::ListBinding* listbinding_;
  Stella::Expr* expr_;
  Stella::ListExpr* listexpr_;
  Stella::PatternBinding* patternbinding_;
  Stella::ListPatternBinding* listpatternbinding_;
  Stella::VariantFieldType* variantfieldtype_;
  Stella::ListVariantFieldType* listvariantfieldtype_;
  Stella::RecordFieldType* recordfieldtype_;
  Stella::ListRecordFieldType* listrecordfieldtype_;
  Stella::Typing* typing_;
}
%define api.prefix {Stellayy}
%token _ERROR_
%token STELLA__SYMB_0    //   ,
%token STELLA__SYMB_1    //   ;
%token STELLA__SYMB_2    //   (
%token STELLA__SYMB_3    //   )
%token STELLA__SYMB_4    //   {
%token STELLA__SYMB_5    //   }
%token STELLA__SYMB_6    //   =
%token STELLA__SYMB_7    //   :
%token STELLA__SYMB_8    //   ->
%token STELLA__SYMB_9    //   =>
%token STELLA__SYMB_10    //   |
%token STELLA__SYMB_11    //   <|
%token STELLA__SYMB_12    //   |>
%token STELLA__SYMB_13    //   [
%token STELLA__SYMB_14    //   ]
%token STELLA__SYMB_15    //   <
%token STELLA__SYMB_16    //   <=
%token STELLA__SYMB_17    //   >
%token STELLA__SYMB_18    //   >=
%token STELLA__SYMB_19    //   ==
%token STELLA__SYMB_20    //   !=
%token STELLA__SYMB_21    //   +
%token STELLA__SYMB_22    //   -
%token STELLA__SYMB_23    //   *
%token STELLA__SYMB_24    //   /
%token STELLA__SYMB_25    //   .
%token STELLA__SYMB_26    //   List::head
%token STELLA__SYMB_27    //   List::isempty
%token STELLA__SYMB_28    //   List::tail
%token STELLA__SYMB_29    //   Nat::pred
%token STELLA__SYMB_30    //   Nat::iszero
%token STELLA__SYMB_31    //   Nat::rec
%token STELLA__SYMB_32    //   Bool
%token STELLA__SYMB_33    //   Nat
%token STELLA__SYMB_34    //   Unit
%token STELLA__SYMB_35    //   and
%token STELLA__SYMB_36    //   as
%token STELLA__SYMB_37    //   cons
%token STELLA__SYMB_38    //   core
%token STELLA__SYMB_39    //   else
%token STELLA__SYMB_40    //   extend
%token STELLA__SYMB_41    //   false
%token STELLA__SYMB_42    //   fix
%token STELLA__SYMB_43    //   fn
%token STELLA__SYMB_44    //   fold
%token STELLA__SYMB_45    //   if
%token STELLA__SYMB_46    //   in
%token STELLA__SYMB_47    //   inl
%token STELLA__SYMB_48    //   inline
%token STELLA__SYMB_49    //   inr
%token STELLA__SYMB_50    //   language
%token STELLA__SYMB_51    //   let
%token STELLA__SYMB_52    //   letrec
%token STELLA__SYMB_53    //   match
%token STELLA__SYMB_54    //   not
%token STELLA__SYMB_55    //   or
%token STELLA__SYMB_56    //   return
%token STELLA__SYMB_57    //   succ
%token STELLA__SYMB_58    //   then
%token STELLA__SYMB_59    //   throws
%token STELLA__SYMB_60    //   true
%token STELLA__SYMB_61    //   type
%token STELLA__SYMB_62    //   unfold
%token STELLA__SYMB_63    //   unit
%token STELLA__SYMB_64    //   with
%token STELLA__SYMB_65    //   µ
%token<string_> STELLA__SYMB_66    //   StellaIdent
%token<string_> STELLA__SYMB_67    //   ExtensionName

%type <program_> Program
%type <liststellaident_> ListStellaIdent
%type <languagedecl_> LanguageDecl
%type <extension_> Extension
%type <listextensionname_> ListExtensionName
%type <listextension_> ListExtension
%type <decl_> Decl
%type <listdecl_> ListDecl
%type <localdecl_> LocalDecl
%type <listlocaldecl_> ListLocalDecl
%type <annotation_> Annotation
%type <listannotation_> ListAnnotation
%type <paramdecl_> ParamDecl
%type <listparamdecl_> ListParamDecl
%type <returntype_> ReturnType
%type <throwtype_> ThrowType
%type <type_> Type9
%type <listtype_> ListType9
%type <matchcase_> MatchCase
%type <listmatchcase_> ListMatchCase
%type <optionaltyping_> OptionalTyping
%type <patterndata_> PatternData
%type <exprdata_> ExprData
%type <pattern_> Pattern
%type <listpattern_> ListPattern
%type <labelledpattern_> LabelledPattern
%type <listlabelledpattern_> ListLabelledPattern
%type <binding_> Binding
%type <listbinding_> ListBinding
%type <expr_> Expr
%type <listexpr_> ListExpr
%type <expr_> Expr1
%type <patternbinding_> PatternBinding
%type <listpatternbinding_> ListPatternBinding
%type <expr_> Expr2
%type <listexpr_> ListExpr2
%type <expr_> Expr3
%type <expr_> Expr4
%type <expr_> Expr6
%type <expr_> Expr7
%type <type_> Type
%type <type_> Type1
%type <type_> Type2
%type <type_> Type3
%type <listtype_> ListType
%type <expr_> Expr5
%type <variantfieldtype_> VariantFieldType
%type <listvariantfieldtype_> ListVariantFieldType
%type <recordfieldtype_> RecordFieldType
%type <listrecordfieldtype_> ListRecordFieldType
%type <typing_> Typing

%start Program
%token<int_> _INTEGER_

%%
Program : LanguageDecl ListExtension ListDecl {  $$ = new Stella::AProgram($1, $2, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Program_= $$; }
;
ListStellaIdent : /* empty */ {  $$ = new Stella::ListStellaIdent(); Stella::YY_RESULT_ListStellaIdent_= $$; }
  | STELLA__SYMB_66 {  $$ = new Stella::ListStellaIdent() ; $$->push_back($1); Stella::YY_RESULT_ListStellaIdent_= $$; }
  | STELLA__SYMB_66 STELLA__SYMB_0 ListStellaIdent {  $3->push_back($1) ; $$ = $3 ; Stella::YY_RESULT_ListStellaIdent_= $$; }
;
LanguageDecl : STELLA__SYMB_50 STELLA__SYMB_38 STELLA__SYMB_1 {  $$ = new Stella::LanguageCore(); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_LanguageDecl_= $$; }
;
Extension : STELLA__SYMB_40 STELLA__SYMB_64 ListExtensionName {  std::reverse($3->begin(),$3->end()) ;$$ = new Stella::AnExtension($3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Extension_= $$; }
;
ListExtensionName : /* empty */ {  $$ = new Stella::ListExtensionName(); Stella::YY_RESULT_ListExtensionName_= $$; }
  | STELLA__SYMB_67 {  $$ = new Stella::ListExtensionName() ; $$->push_back($1); Stella::YY_RESULT_ListExtensionName_= $$; }
  | STELLA__SYMB_67 STELLA__SYMB_0 ListExtensionName {  $3->push_back($1) ; $$ = $3 ; Stella::YY_RESULT_ListExtensionName_= $$; }
;
ListExtension : /* empty */ {  $$ = new Stella::ListExtension(); Stella::YY_RESULT_ListExtension_= $$; }
  | ListExtension Extension STELLA__SYMB_1 {  $1->push_back($2) ; $$ = $1 ; Stella::YY_RESULT_ListExtension_= $$; }
;
Decl : ListAnnotation STELLA__SYMB_43 STELLA__SYMB_66 STELLA__SYMB_2 ListParamDecl STELLA__SYMB_3 ReturnType ThrowType STELLA__SYMB_4 ListDecl STELLA__SYMB_56 Expr STELLA__SYMB_5 {  std::reverse($5->begin(),$5->end()) ;$$ = new Stella::DeclFun($1, $3, $5, $7, $8, $10, $12); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Decl_= $$; }
  | STELLA__SYMB_61 STELLA__SYMB_66 STELLA__SYMB_6 Type {  $$ = new Stella::DeclTypeAlias($2, $4); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Decl_= $$; }
;
ListDecl : /* empty */ {  $$ = new Stella::ListDecl(); Stella::YY_RESULT_ListDecl_= $$; }
  | ListDecl Decl {  $1->push_back($2) ; $$ = $1 ; Stella::YY_RESULT_ListDecl_= $$; }
;
LocalDecl : Decl {  $$ = new Stella::ALocalDecl($1); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_LocalDecl_= $$; }
;
ListLocalDecl : /* empty */ {  $$ = new Stella::ListLocalDecl(); Stella::YY_RESULT_ListLocalDecl_= $$; }
  | ListLocalDecl LocalDecl STELLA__SYMB_1 {  $1->push_back($2) ; $$ = $1 ; Stella::YY_RESULT_ListLocalDecl_= $$; }
;
Annotation : STELLA__SYMB_48 {  $$ = new Stella::InlineAnnotation(); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Annotation_= $$; }
;
ListAnnotation : /* empty */ {  $$ = new Stella::ListAnnotation(); Stella::YY_RESULT_ListAnnotation_= $$; }
  | ListAnnotation Annotation {  $1->push_back($2) ; $$ = $1 ; Stella::YY_RESULT_ListAnnotation_= $$; }
;
ParamDecl : STELLA__SYMB_66 STELLA__SYMB_7 Type {  $$ = new Stella::AParamDecl($1, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_ParamDecl_= $$; }
;
ListParamDecl : /* empty */ {  $$ = new Stella::ListParamDecl(); Stella::YY_RESULT_ListParamDecl_= $$; }
  | ParamDecl {  $$ = new Stella::ListParamDecl() ; $$->push_back($1); Stella::YY_RESULT_ListParamDecl_= $$; }
  | ParamDecl STELLA__SYMB_0 ListParamDecl {  $3->push_back($1) ; $$ = $3 ; Stella::YY_RESULT_ListParamDecl_= $$; }
;
ReturnType : /* empty */ {  $$ = new Stella::NoReturnType(); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_ReturnType_= $$; }
  | STELLA__SYMB_8 Type {  $$ = new Stella::SomeReturnType($2); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_ReturnType_= $$; }
;
ThrowType : /* empty */ {  $$ = new Stella::NoThrowType(); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_ThrowType_= $$; }
  | STELLA__SYMB_59 ListType9 {  std::reverse($2->begin(),$2->end()) ;$$ = new Stella::SomeThrowType($2); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_ThrowType_= $$; }
;
Type9 : Type {  $$ = $1; Stella::YY_RESULT_Type_= $$; }
;
ListType9 : Type9 {  $$ = new Stella::ListType() ; $$->push_back($1); Stella::YY_RESULT_ListType_= $$; }
  | Type9 STELLA__SYMB_0 ListType9 {  $3->push_back($1) ; $$ = $3 ; Stella::YY_RESULT_ListType_= $$; }
;
MatchCase : Pattern STELLA__SYMB_9 Expr {  $$ = new Stella::AMatchCase($1, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_MatchCase_= $$; }
;
ListMatchCase : /* empty */ {  $$ = new Stella::ListMatchCase(); Stella::YY_RESULT_ListMatchCase_= $$; }
  | MatchCase {  $$ = new Stella::ListMatchCase() ; $$->push_back($1); Stella::YY_RESULT_ListMatchCase_= $$; }
  | MatchCase STELLA__SYMB_10 ListMatchCase {  $3->push_back($1) ; $$ = $3 ; Stella::YY_RESULT_ListMatchCase_= $$; }
;
OptionalTyping : /* empty */ {  $$ = new Stella::NoTyping(); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_OptionalTyping_= $$; }
  | STELLA__SYMB_7 Type {  $$ = new Stella::SomeTyping($2); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_OptionalTyping_= $$; }
;
PatternData : /* empty */ {  $$ = new Stella::NoPatternData(); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_PatternData_= $$; }
  | STELLA__SYMB_6 Pattern {  $$ = new Stella::SomePatternData($2); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_PatternData_= $$; }
;
ExprData : /* empty */ {  $$ = new Stella::NoExprData(); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_ExprData_= $$; }
  | STELLA__SYMB_6 Expr {  $$ = new Stella::SomeExprData($2); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_ExprData_= $$; }
;
Pattern : STELLA__SYMB_11 STELLA__SYMB_66 PatternData STELLA__SYMB_12 {  $$ = new Stella::PatternVariant($2, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Pattern_= $$; }
  | STELLA__SYMB_47 STELLA__SYMB_2 Pattern STELLA__SYMB_3 {  $$ = new Stella::PatternInl($3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Pattern_= $$; }
  | STELLA__SYMB_49 STELLA__SYMB_2 Pattern STELLA__SYMB_3 {  $$ = new Stella::PatternInr($3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Pattern_= $$; }
  | STELLA__SYMB_4 ListPattern STELLA__SYMB_5 {  std::reverse($2->begin(),$2->end()) ;$$ = new Stella::PatternTuple($2); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Pattern_= $$; }
  | STELLA__SYMB_4 ListLabelledPattern STELLA__SYMB_5 {  std::reverse($2->begin(),$2->end()) ;$$ = new Stella::PatternRecord($2); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Pattern_= $$; }
  | STELLA__SYMB_13 ListPattern STELLA__SYMB_14 {  std::reverse($2->begin(),$2->end()) ;$$ = new Stella::PatternList($2); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Pattern_= $$; }
  | STELLA__SYMB_2 Pattern STELLA__SYMB_0 Pattern STELLA__SYMB_3 {  $$ = new Stella::PatternCons($2, $4); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Pattern_= $$; }
  | STELLA__SYMB_41 {  $$ = new Stella::PatternFalse(); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Pattern_= $$; }
  | STELLA__SYMB_60 {  $$ = new Stella::PatternTrue(); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Pattern_= $$; }
  | STELLA__SYMB_63 {  $$ = new Stella::PatternUnit(); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Pattern_= $$; }
  | _INTEGER_ {  $$ = new Stella::PatternInt($1); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Pattern_= $$; }
  | STELLA__SYMB_57 STELLA__SYMB_2 Pattern STELLA__SYMB_3 {  $$ = new Stella::PatternSucc($3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Pattern_= $$; }
  | STELLA__SYMB_66 {  $$ = new Stella::PatternVar($1); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Pattern_= $$; }
  | STELLA__SYMB_2 Pattern STELLA__SYMB_3 {  $$ = $2; Stella::YY_RESULT_Pattern_= $$; }
;
ListPattern : /* empty */ {  $$ = new Stella::ListPattern(); Stella::YY_RESULT_ListPattern_= $$; }
  | Pattern {  $$ = new Stella::ListPattern() ; $$->push_back($1); Stella::YY_RESULT_ListPattern_= $$; }
  | Pattern STELLA__SYMB_0 ListPattern {  $3->push_back($1) ; $$ = $3 ; Stella::YY_RESULT_ListPattern_= $$; }
;
LabelledPattern : STELLA__SYMB_66 STELLA__SYMB_6 Pattern {  $$ = new Stella::ALabelledPattern($1, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_LabelledPattern_= $$; }
;
ListLabelledPattern : LabelledPattern {  $$ = new Stella::ListLabelledPattern() ; $$->push_back($1); Stella::YY_RESULT_ListLabelledPattern_= $$; }
  | LabelledPattern STELLA__SYMB_0 ListLabelledPattern {  $3->push_back($1) ; $$ = $3 ; Stella::YY_RESULT_ListLabelledPattern_= $$; }
;
Binding : STELLA__SYMB_66 STELLA__SYMB_6 Expr {  $$ = new Stella::ABinding($1, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Binding_= $$; }
;
ListBinding : Binding {  $$ = new Stella::ListBinding() ; $$->push_back($1); Stella::YY_RESULT_ListBinding_= $$; }
  | Binding STELLA__SYMB_0 ListBinding {  $3->push_back($1) ; $$ = $3 ; Stella::YY_RESULT_ListBinding_= $$; }
;
Expr : Expr1 STELLA__SYMB_1 Expr {  $$ = new Stella::Sequence($1, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | Expr1 STELLA__SYMB_1 {  $$ = $1; Stella::YY_RESULT_Expr_= $$; }
  | Expr1 {  $$ = $1; Stella::YY_RESULT_Expr_= $$; }
;
ListExpr : /* empty */ {  $$ = new Stella::ListExpr(); Stella::YY_RESULT_ListExpr_= $$; }
  | Expr {  $$ = new Stella::ListExpr() ; $$->push_back($1); Stella::YY_RESULT_ListExpr_= $$; }
  | Expr STELLA__SYMB_0 ListExpr {  $3->push_back($1) ; $$ = $3 ; Stella::YY_RESULT_ListExpr_= $$; }
;
Expr1 : STELLA__SYMB_45 Expr1 STELLA__SYMB_58 Expr1 STELLA__SYMB_39 Expr1 {  $$ = new Stella::If($2, $4, $6); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_51 ListPatternBinding STELLA__SYMB_46 Expr1 {  std::reverse($2->begin(),$2->end()) ;$$ = new Stella::Let($2, $4); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_52 ListPatternBinding STELLA__SYMB_46 Expr1 {  std::reverse($2->begin(),$2->end()) ;$$ = new Stella::LetRec($2, $4); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | Expr2 {  $$ = $1; Stella::YY_RESULT_Expr_= $$; }
;
PatternBinding : Pattern STELLA__SYMB_6 Expr {  $$ = new Stella::APatternBinding($1, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_PatternBinding_= $$; }
;
ListPatternBinding : PatternBinding {  $$ = new Stella::ListPatternBinding() ; $$->push_back($1); Stella::YY_RESULT_ListPatternBinding_= $$; }
  | PatternBinding STELLA__SYMB_0 ListPatternBinding {  $3->push_back($1) ; $$ = $3 ; Stella::YY_RESULT_ListPatternBinding_= $$; }
;
Expr2 : Expr3 STELLA__SYMB_15 Expr3 {  $$ = new Stella::LessThan($1, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | Expr3 STELLA__SYMB_16 Expr3 {  $$ = new Stella::LessThanOrEqual($1, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | Expr3 STELLA__SYMB_17 Expr3 {  $$ = new Stella::GreaterThan($1, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | Expr3 STELLA__SYMB_18 Expr3 {  $$ = new Stella::GreaterThanOrEqual($1, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | Expr3 STELLA__SYMB_19 Expr3 {  $$ = new Stella::Equal($1, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | Expr3 STELLA__SYMB_20 Expr3 {  $$ = new Stella::NotEqual($1, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | Expr3 {  $$ = $1; Stella::YY_RESULT_Expr_= $$; }
;
ListExpr2 : Expr2 STELLA__SYMB_1 {  $$ = new Stella::ListExpr() ; $$->push_back($1); Stella::YY_RESULT_ListExpr_= $$; }
  | Expr2 STELLA__SYMB_1 ListExpr2 {  $3->push_back($1) ; $$ = $3 ; Stella::YY_RESULT_ListExpr_= $$; }
;
Expr3 : Expr3 STELLA__SYMB_36 Type2 {  $$ = new Stella::TypeAsc($1, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_43 STELLA__SYMB_2 ListParamDecl STELLA__SYMB_3 STELLA__SYMB_4 STELLA__SYMB_56 Expr STELLA__SYMB_5 {  std::reverse($3->begin(),$3->end()) ;$$ = new Stella::Abstraction($3, $7); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_11 STELLA__SYMB_66 ExprData STELLA__SYMB_12 {  $$ = new Stella::Variant($2, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_53 Expr2 STELLA__SYMB_4 ListMatchCase STELLA__SYMB_5 {  std::reverse($4->begin(),$4->end()) ;$$ = new Stella::Match($2, $4); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_13 ListExpr STELLA__SYMB_14 {  std::reverse($2->begin(),$2->end()) ;$$ = new Stella::List($2); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | Expr3 STELLA__SYMB_21 Expr4 {  $$ = new Stella::Add($1, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | Expr3 STELLA__SYMB_22 Expr4 {  $$ = new Stella::Subtract($1, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | Expr3 STELLA__SYMB_55 Expr4 {  $$ = new Stella::LogicOr($1, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | Expr4 {  $$ = $1; Stella::YY_RESULT_Expr_= $$; }
;
Expr4 : Expr4 STELLA__SYMB_23 Expr5 {  $$ = new Stella::Multiply($1, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | Expr4 STELLA__SYMB_24 Expr5 {  $$ = new Stella::Divide($1, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | Expr4 STELLA__SYMB_35 Expr5 {  $$ = new Stella::LogicAnd($1, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | Expr5 {  $$ = $1; Stella::YY_RESULT_Expr_= $$; }
;
Expr6 : Expr6 STELLA__SYMB_2 ListExpr STELLA__SYMB_3 {  std::reverse($3->begin(),$3->end()) ;$$ = new Stella::Application($1, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | Expr6 STELLA__SYMB_25 STELLA__SYMB_66 {  $$ = new Stella::DotRecord($1, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | Expr6 STELLA__SYMB_25 _INTEGER_ {  $$ = new Stella::DotTuple($1, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_4 ListExpr STELLA__SYMB_5 {  std::reverse($2->begin(),$2->end()) ;$$ = new Stella::Tuple($2); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_4 ListBinding STELLA__SYMB_5 {  std::reverse($2->begin(),$2->end()) ;$$ = new Stella::Record($2); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_37 STELLA__SYMB_2 Expr STELLA__SYMB_0 Expr STELLA__SYMB_3 {  $$ = new Stella::ConsList($3, $5); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_26 STELLA__SYMB_2 Expr STELLA__SYMB_3 {  $$ = new Stella::Head($3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_27 STELLA__SYMB_2 Expr STELLA__SYMB_3 {  $$ = new Stella::IsEmpty($3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_28 STELLA__SYMB_2 Expr STELLA__SYMB_3 {  $$ = new Stella::Tail($3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_47 STELLA__SYMB_2 Expr STELLA__SYMB_3 {  $$ = new Stella::Inl($3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_49 STELLA__SYMB_2 Expr STELLA__SYMB_3 {  $$ = new Stella::Inr($3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_57 STELLA__SYMB_2 Expr STELLA__SYMB_3 {  $$ = new Stella::Succ($3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_54 STELLA__SYMB_2 Expr STELLA__SYMB_3 {  $$ = new Stella::LogicNot($3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_29 STELLA__SYMB_2 Expr STELLA__SYMB_3 {  $$ = new Stella::Pred($3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_30 STELLA__SYMB_2 Expr STELLA__SYMB_3 {  $$ = new Stella::IsZero($3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_42 STELLA__SYMB_2 Expr STELLA__SYMB_3 {  $$ = new Stella::Fix($3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_31 STELLA__SYMB_2 Expr STELLA__SYMB_0 Expr STELLA__SYMB_0 Expr STELLA__SYMB_3 {  $$ = new Stella::NatRec($3, $5, $7); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_44 STELLA__SYMB_13 Type STELLA__SYMB_14 Expr7 {  $$ = new Stella::Fold($3, $5); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_62 STELLA__SYMB_13 Type STELLA__SYMB_14 Expr7 {  $$ = new Stella::Unfold($3, $5); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | Expr7 {  $$ = $1; Stella::YY_RESULT_Expr_= $$; }
;
Expr7 : STELLA__SYMB_60 {  $$ = new Stella::ConstTrue(); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_41 {  $$ = new Stella::ConstFalse(); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_63 {  $$ = new Stella::ConstUnit(); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | _INTEGER_ {  $$ = new Stella::ConstInt($1); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_66 {  $$ = new Stella::Var($1); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Expr_= $$; }
  | STELLA__SYMB_2 Expr STELLA__SYMB_3 {  $$ = $2; Stella::YY_RESULT_Expr_= $$; }
;
Type : STELLA__SYMB_43 STELLA__SYMB_2 ListType STELLA__SYMB_3 STELLA__SYMB_8 Type {  std::reverse($3->begin(),$3->end()) ;$$ = new Stella::TypeFun($3, $6); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Type_= $$; }
  | STELLA__SYMB_65 STELLA__SYMB_66 STELLA__SYMB_25 Type {  $$ = new Stella::TypeRec($2, $4); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Type_= $$; }
  | Type1 {  $$ = $1; Stella::YY_RESULT_Type_= $$; }
;
Type1 : Type2 STELLA__SYMB_21 Type2 {  $$ = new Stella::TypeSum($1, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Type_= $$; }
  | Type2 {  $$ = $1; Stella::YY_RESULT_Type_= $$; }
;
Type2 : STELLA__SYMB_4 ListType STELLA__SYMB_5 {  std::reverse($2->begin(),$2->end()) ;$$ = new Stella::TypeTuple($2); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Type_= $$; }
  | STELLA__SYMB_4 ListRecordFieldType STELLA__SYMB_5 {  std::reverse($2->begin(),$2->end()) ;$$ = new Stella::TypeRecord($2); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Type_= $$; }
  | STELLA__SYMB_11 ListVariantFieldType STELLA__SYMB_12 {  std::reverse($2->begin(),$2->end()) ;$$ = new Stella::TypeVariant($2); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Type_= $$; }
  | STELLA__SYMB_13 Type STELLA__SYMB_14 {  $$ = new Stella::TypeList($2); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Type_= $$; }
  | Type3 {  $$ = $1; Stella::YY_RESULT_Type_= $$; }
;
Type3 : STELLA__SYMB_32 {  $$ = new Stella::TypeBool(); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Type_= $$; }
  | STELLA__SYMB_33 {  $$ = new Stella::TypeNat(); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Type_= $$; }
  | STELLA__SYMB_34 {  $$ = new Stella::TypeUnit(); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Type_= $$; }
  | STELLA__SYMB_66 {  $$ = new Stella::TypeVar($1); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Type_= $$; }
  | STELLA__SYMB_2 Type STELLA__SYMB_3 {  $$ = $2; Stella::YY_RESULT_Type_= $$; }
;
ListType : /* empty */ {  $$ = new Stella::ListType(); Stella::YY_RESULT_ListType_= $$; }
  | Type {  $$ = new Stella::ListType() ; $$->push_back($1); Stella::YY_RESULT_ListType_= $$; }
  | Type STELLA__SYMB_0 ListType {  $3->push_back($1) ; $$ = $3 ; Stella::YY_RESULT_ListType_= $$; }
;
Expr5 : Expr6 {  $$ = $1; Stella::YY_RESULT_Expr_= $$; }
;
VariantFieldType : STELLA__SYMB_66 OptionalTyping {  $$ = new Stella::AVariantFieldType($1, $2); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_VariantFieldType_= $$; }
;
ListVariantFieldType : /* empty */ {  $$ = new Stella::ListVariantFieldType(); Stella::YY_RESULT_ListVariantFieldType_= $$; }
  | VariantFieldType {  $$ = new Stella::ListVariantFieldType() ; $$->push_back($1); Stella::YY_RESULT_ListVariantFieldType_= $$; }
  | VariantFieldType STELLA__SYMB_0 ListVariantFieldType {  $3->push_back($1) ; $$ = $3 ; Stella::YY_RESULT_ListVariantFieldType_= $$; }
;
RecordFieldType : STELLA__SYMB_66 STELLA__SYMB_7 Type {  $$ = new Stella::ARecordFieldType($1, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_RecordFieldType_= $$; }
;
ListRecordFieldType : RecordFieldType {  $$ = new Stella::ListRecordFieldType() ; $$->push_back($1); Stella::YY_RESULT_ListRecordFieldType_= $$; }
  | RecordFieldType STELLA__SYMB_0 ListRecordFieldType {  $3->push_back($1) ; $$ = $3 ; Stella::YY_RESULT_ListRecordFieldType_= $$; }
;
Typing : Expr STELLA__SYMB_7 Type {  $$ = new Stella::ATyping($1, $3); $$->line_number = Stellayy_mylinenumber; Stella::YY_RESULT_Typing_= $$; }
;

