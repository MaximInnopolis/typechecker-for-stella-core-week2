%option prefix="Stellayy"
/* This FLex file was machine-generated by the BNF converter */
%{
#include <string.h>
#include "Parser.H"
#define YY_BUFFER_LENGTH 4096
extern int Stellayy_mylinenumber ;
static char YY_PARSED_STRING[YY_BUFFER_LENGTH];
static void YY_BUFFER_APPEND(char *s)
{
  strcat(YY_PARSED_STRING, s); //Do something better here!
}
static void YY_BUFFER_RESET(void)
{
  for(int x = 0; x < YY_BUFFER_LENGTH; x++)
    YY_PARSED_STRING[x] = 0;
}

%}

LETTER [a-zA-Z]
CAPITAL [A-Z]
SMALL [a-z]
DIGIT [0-9]
IDENT [a-zA-Z0-9'_]
%START YYINITIAL COMMENT CHAR CHARESC CHAREND STRING ESCAPED
%%

<YYINITIAL>","      	 return STELLA__SYMB_0;
<YYINITIAL>";"      	 return STELLA__SYMB_1;
<YYINITIAL>"("      	 return STELLA__SYMB_2;
<YYINITIAL>")"      	 return STELLA__SYMB_3;
<YYINITIAL>"{"      	 return STELLA__SYMB_4;
<YYINITIAL>"}"      	 return STELLA__SYMB_5;
<YYINITIAL>"="      	 return STELLA__SYMB_6;
<YYINITIAL>":"      	 return STELLA__SYMB_7;
<YYINITIAL>"->"      	 return STELLA__SYMB_8;
<YYINITIAL>"=>"      	 return STELLA__SYMB_9;
<YYINITIAL>"|"      	 return STELLA__SYMB_10;
<YYINITIAL>"<|"      	 return STELLA__SYMB_11;
<YYINITIAL>"|>"      	 return STELLA__SYMB_12;
<YYINITIAL>"["      	 return STELLA__SYMB_13;
<YYINITIAL>"]"      	 return STELLA__SYMB_14;
<YYINITIAL>"<"      	 return STELLA__SYMB_15;
<YYINITIAL>"<="      	 return STELLA__SYMB_16;
<YYINITIAL>">"      	 return STELLA__SYMB_17;
<YYINITIAL>">="      	 return STELLA__SYMB_18;
<YYINITIAL>"=="      	 return STELLA__SYMB_19;
<YYINITIAL>"!="      	 return STELLA__SYMB_20;
<YYINITIAL>"+"      	 return STELLA__SYMB_21;
<YYINITIAL>"-"      	 return STELLA__SYMB_22;
<YYINITIAL>"*"      	 return STELLA__SYMB_23;
<YYINITIAL>"/"      	 return STELLA__SYMB_24;
<YYINITIAL>"."      	 return STELLA__SYMB_25;
<YYINITIAL>"List::head"      	 return STELLA__SYMB_26;
<YYINITIAL>"List::isempty"      	 return STELLA__SYMB_27;
<YYINITIAL>"List::tail"      	 return STELLA__SYMB_28;
<YYINITIAL>"Nat::pred"      	 return STELLA__SYMB_29;
<YYINITIAL>"Nat::iszero"      	 return STELLA__SYMB_30;
<YYINITIAL>"Nat::rec"      	 return STELLA__SYMB_31;
<YYINITIAL>"Bool"      	 return STELLA__SYMB_32;
<YYINITIAL>"Nat"      	 return STELLA__SYMB_33;
<YYINITIAL>"Unit"      	 return STELLA__SYMB_34;
<YYINITIAL>"and"      	 return STELLA__SYMB_35;
<YYINITIAL>"as"      	 return STELLA__SYMB_36;
<YYINITIAL>"cons"      	 return STELLA__SYMB_37;
<YYINITIAL>"core"      	 return STELLA__SYMB_38;
<YYINITIAL>"else"      	 return STELLA__SYMB_39;
<YYINITIAL>"extend"      	 return STELLA__SYMB_40;
<YYINITIAL>"false"      	 return STELLA__SYMB_41;
<YYINITIAL>"fix"      	 return STELLA__SYMB_42;
<YYINITIAL>"fn"      	 return STELLA__SYMB_43;
<YYINITIAL>"fold"      	 return STELLA__SYMB_44;
<YYINITIAL>"if"      	 return STELLA__SYMB_45;
<YYINITIAL>"in"      	 return STELLA__SYMB_46;
<YYINITIAL>"inl"      	 return STELLA__SYMB_47;
<YYINITIAL>"inline"      	 return STELLA__SYMB_48;
<YYINITIAL>"inr"      	 return STELLA__SYMB_49;
<YYINITIAL>"language"      	 return STELLA__SYMB_50;
<YYINITIAL>"let"      	 return STELLA__SYMB_51;
<YYINITIAL>"letrec"      	 return STELLA__SYMB_52;
<YYINITIAL>"match"      	 return STELLA__SYMB_53;
<YYINITIAL>"not"      	 return STELLA__SYMB_54;
<YYINITIAL>"or"      	 return STELLA__SYMB_55;
<YYINITIAL>"return"      	 return STELLA__SYMB_56;
<YYINITIAL>"succ"      	 return STELLA__SYMB_57;
<YYINITIAL>"then"      	 return STELLA__SYMB_58;
<YYINITIAL>"throws"      	 return STELLA__SYMB_59;
<YYINITIAL>"true"      	 return STELLA__SYMB_60;
<YYINITIAL>"type"      	 return STELLA__SYMB_61;
<YYINITIAL>"unfold"      	 return STELLA__SYMB_62;
<YYINITIAL>"unit"      	 return STELLA__SYMB_63;
<YYINITIAL>"with"      	 return STELLA__SYMB_64;
<YYINITIAL>"Âµ"      	 return STELLA__SYMB_65;

<YYINITIAL>"//"[^\n]*\n ++Stellayy_mylinenumber; // BNFC: comment "//";
<YYINITIAL>"/*" BEGIN COMMENT; // BNFC: comment "/*" "*/";
<COMMENT>"*/" BEGIN YYINITIAL;
<COMMENT>. /* skip */;
<COMMENT>[\n] ++Stellayy_mylinenumber;

<YYINITIAL>({LETTER}|\_)({LETTER}|{DIGIT}|\_|\-|\!|\?|\:)*     	 Stellayylval.string_ = strdup(yytext); return STELLA__SYMB_66;
<YYINITIAL>\#({LETTER}|\_|\-|{DIGIT})+     	 Stellayylval.string_ = strdup(yytext); return STELLA__SYMB_67;
<YYINITIAL>{DIGIT}+      	 Stellayylval.int_ = atoi(yytext); return STELLA__INTEGER_;
\n  ++Stellayy_mylinenumber ;
<YYINITIAL>[ \t\r\n\f]      	 /* ignore white space. */;
<YYINITIAL>.      	 return STELLA__ERROR_;
%%
void Stellainitialize_lexer(FILE *inp) { yyrestart(inp); BEGIN YYINITIAL; }
int yywrap(void) { return 1; }

